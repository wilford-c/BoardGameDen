@page "/boardgames"
@using BoardGameDen.Web.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime


<h3>Board Game Price List</h3>

<div class="w-100">
    <SearchBox Items="boardGames" OnSearch="UpadatedFilteredGames"></SearchBox>
</div>


@if (boardGames == null)
{
    <p>Loading games...</p>
}
else if (!boardGames.Any())
{
    <p>No board games found.</p>
}
else
{
    <DataTable Id="gamesTable">
        <thead>
            <tr>
                <th>Thumbnail</th>
                <th>Title</th>
                <th>Supplier Price</th>
                <th>Our Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var game in boardGames)
            {
                <tr>
                    <td><img src="@game.Thumbnail" alt="@game.Name" width="50" /></td>
                    <td>@game.Name</td>
                    <td>@game.SalePrice.ToString("C")</td>
                    <td>@game.OurPrice.ToString("C")</td>
                </tr>
            }
        </tbody>
    </DataTable>

    <div class="mt-3">
        <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(currentPage == 1)">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button class="btn btn-primary" @onclick="NextPage" disabled="@(currentPage == totalPages)">Next</button>
    </div>
}

@code {
    private List<BoardGameDto> boardGames = new();
    private string searchQuery = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalCount = 0;
    private int totalPages => (int)Math.Ceiling((double)totalCount / pageSize);
    List<BoardGameDto> filteredGames = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadBoardGames();
        filteredGames = boardGames.ToList();
    }

    private async Task LoadBoardGames()
    {
        var response = await Http.GetFromJsonAsync<BoardGameResponse>(
            $"https://localhost:7239/api/boardgames?search={searchQuery}&page={currentPage}&pageSize={pageSize}");

        if (response != null)
        {
            boardGames = response.BoardGames;
            totalCount = response.TotalCount;
            StateHasChanged();
        }
    }


    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadBoardGames();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadBoardGames();
        }
    }

    private class BoardGameResponse
    {
        public List<BoardGameDto> BoardGames { get; set; } = new();
        public int TotalCount { get; set; }
    }


    void UpadatedFilteredGames(string searchTerm)
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredGames = boardGames.ToList();
        }
        else
        {
            filteredGames = boardGames.Where(
                game => game.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                game.URL.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)


            )
            .ToList();
        }
    }

}